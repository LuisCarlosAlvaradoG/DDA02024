'''Listas en Python: Definici칩n y Conceptos Fundamentales
游늷 Definici칩n de una Lista
Una lista en Python es una estructura de datos que permite almacenar m칰ltiples valores en un solo objeto. 
Es mutable, lo que significa que sus elementos pueden modificarse despu칠s de su creaci칩n.
Las listas pueden contener elementos de diferentes tipos, como enteros, cadenas, flotantes e incluso otras listas.
'''

# Definir una lista con diferentes tipos de datos
mi_lista = [10, "Hola", 3.14, True]
print(mi_lista)  # [10, 'Hola', 3.14, True]

'''
游늷 Creaci칩n de Listas
'''
# Lista vac칤a
lista_vacia = []

# Lista con n칰meros
numeros = [1, 2, 3, 4, 5]

# Lista con cadenas
frutas = ["manzana", "banana", "cereza"]

# Lista mixta
mixta = [10, "Python", 3.14, False]

'''
游늷 Acceder a Elementos de una Lista
游댳 Por 칤ndice
Cada elemento tiene un 칤ndice, comenzando desde 0 para el primer elemento.
'''

frutas = ["manzana", "banana", "cereza"]

# Primer elemento
print(frutas[0])  # 'manzana'

# 칔ltimo elemento
print(frutas[-1])  # 'cereza'

# Segundo elemento
print(frutas[1])  # 'banana'

'''
游댳 Segmentaci칩n (Slicing)
'''

numeros = [10, 20, 30, 40, 50, 60, 70]

# Desde el 칤ndice 1 hasta el 4 (sin incluir el 4)
print(numeros[1:4])  # [20, 30, 40]

# Desde el inicio hasta el 칤ndice 3 (sin incluir)
print(numeros[:3])  # [10, 20, 30]

# Desde el 칤ndice 2 hasta el final
print(numeros[2:])  # [30, 40, 50, 60, 70]

# Lista en orden inverso
print(numeros[::-1])  # [70, 60, 50, 40, 30, 20, 10]

'''游늷 Modificar una Lista'''


colores = ["rojo", "azul", "verde"]

# Cambiar el segundo elemento
colores[1] = "amarillo"
print(colores)  # ['rojo', 'amarillo', 'verde']

'''游늷 Agregar Elementos a una Lista'''

# Usando append() para agregar un elemento al final
numeros = [1, 2, 3]
numeros.append(4)
print(numeros)  # [1, 2, 3, 4]

# Usando insert() para agregar en una posici칩n espec칤fica
numeros.insert(1, 99)
print(numeros)  # [1, 99, 2, 3, 4]

# Usando extend() para agregar m칰ltiples elementos
numeros.extend([5, 6, 7])
print(numeros)  # [1, 99, 2, 3, 4, 5, 6, 7]

'''
游늷 Eliminar Elementos de una Lista
'''
lista = [10, 20, 30, 40, 50]

# Eliminar por valor
lista.remove(30)
print(lista)  # [10, 20, 40, 50]

# Eliminar por 칤ndice con pop()
valor_eliminado = lista.pop(1)
print(lista)  # [10, 40, 50]
print(valor_eliminado)  # 20

# Eliminar el 칰ltimo elemento con pop()
lista.pop()
print(lista)  # [10, 40]

# Usando del para eliminar por 칤ndice
del lista[0]
print(lista)  # [40]


'''
游늷 Operaciones con Listas
'''
# Concatenaci칩n
lista1 = [1, 2, 3]
lista2 = [4, 5, 6]
resultado = lista1 + lista2
print(resultado)  # [1, 2, 3, 4, 5, 6]

# Repetici칩n
print(lista1 * 3)  # [1, 2, 3, 1, 2, 3, 1, 2, 3]

'''
游늷 Comprobar si un Elemento est치 en una Lista
'''

frutas = ["manzana", "pera", "uva"]

print("pera" in frutas)  # True
print("mango" in frutas)  # False

'''
游늷 Funciones 칔tiles para Listas
'''
numeros = [10, 20, 30, 40, 50]

# Obtener la longitud de la lista
print(len(numeros))  # 5

# Obtener el m치ximo y m칤nimo
print(max(numeros))  # 50
print(min(numeros))  # 10

# Sumar todos los elementos
print(sum(numeros))  # 150

'''M칠todos de listas comunes:
append(x)'''

"Agrega un elemento al final de la lista."
lista = [1, 2, 3]
lista.append(4)
print(lista)  # [1, 2, 3, 4]
# extend(iterable)

"Extiende la lista agregando todos los elementos de un iterable (como otra lista o una tupla)."
lista = [1, 2, 3]
lista.extend([4, 5])
print(lista)  # [1, 2, 3, 4, 5]
# insert(i, x)

"Inserta un elemento en la posici칩n especificada. i es el 칤ndice donde se inserta el elemento x."
lista = [1, 2, 3]
lista.insert(1, 4)
print(lista)  # [1, 4, 2, 3]
# remove(x)

"Elimina la primera aparici칩n del valor especificado."
lista = [1, 2, 3, 2]
lista.remove(2)
print(lista)  # [1, 3, 2]
# pop([i])

"Elimina y devuelve el elemento en la posici칩n especificada. Si no se especifica, elimina el 칰ltimo elemento."
lista = [1, 2, 3]
lista.pop()  # Elimina 3
print(lista)  # [1, 2]

lista.pop(0)  # Elimina 1
print(lista)  # [2]
# clear()

"Elimina todos los elementos de la lista, dej치ndola vac칤a."
lista = [1, 2, 3]
lista.clear()
print(lista)  # []
# index(x[, start[, end]])

"Devuelve el 칤ndice de la primera aparici칩n del valor x. Se puede especificar un rango opcional con start y end."
lista = [1, 2, 3, 2]
print(lista.index(2))  # 1
print(lista.index(2, 2))  # 3 (busca desde el 칤ndice 2)
# count(x)

"Devuelve el n칰mero de veces que x aparece en la lista."
lista = [1, 2, 2, 3]
print(lista.count(2))  # 2
# sort(key=None, reverse=False)

"Ordena la lista en su lugar. Puede aceptar una funci칩n key para personalizar el criterio de ordenaci칩n y un par치metro reverse para ordenar en orden descendente."
lista = [3, 1, 2]
lista.sort()
print(lista)  # [1, 2, 3]

lista.sort(reverse=True)
print(lista)  # [3, 2, 1]
# reverse()

"Invierte los elementos de la lista en su lugar."
lista = [1, 2, 3]
lista.reverse()
print(lista)  # [3, 2, 1]
# copy()

"Devuelve una copia superficial de la lista (copia el contenido, no los objetos anidados)."
lista = [1, 2, 3]
copia_lista = lista.copy()
print(copia_lista)  # [1, 2, 3]
len()

"Devuelve el n칰mero de elementos de la lista."
lista = [1, 2, 3]
print(len(lista))  # 3
"in"

"Operador que verifica si un elemento est치 en la lista."
lista = [1, 2, 3]
print(2 in lista)  # True
"list comprehension"
"Forma de construir una lista en una sola l칤nea."
lista = [x**2 for x in range(5)]
print(lista)  # [0, 1, 4, 9, 16]
"Ejemplo de uso de varios m칠todos de listas:"
lista = [3, 1, 4, 1, 5, 9, 2, 6]
# Elimina el valor '1'
lista.remove(1)
# Inserta '10' en la posici칩n 2
lista.insert(2, 10)
# Ordena la lista
lista.sort()
# Invierte la lista
lista.reverse()
# Muestra la lista final
print(lista)  # [10, 9, 6, 5, 4, 3, 2]
